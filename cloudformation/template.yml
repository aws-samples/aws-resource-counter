# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creates Lambda function and EventBridge schedule to create CloudWatch metrics for resources defined on configuration file.
  Lambda function will create or update metrics according to the configuration on services.json file inside it.

Parameters:
  ScheduleExpression:
    Type: String
    Default: rate(5 minutes)
    AllowedValues:
      - rate(5 minutes)
      - rate(1 hour)
      - rate(1 day)
    Description: EventBridge schedule event.

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    # checkov:skip=CKV_AWS_116:Code log errors on CloudWatch logs
    # checkov:skip=CKV_AWS_117:Not required to run inside a VPC
    # checkov:skip=CKV_AWS_173:Variable is not sensitive
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Permission is defined with much restriction as possible"
          - id: W89
            reason: "Not required to run inside a VPC"
    Properties: 
      Description: 'This Lambda function, invoked by an EventBridge scheduler rule, creates CloudWatch metrics counting configured resources.'
      Architectures:
        - 'arm64'
      Environment: 
        Variables:
          LOG_LEVEL: 'INFO'
      Handler: 'resource_counter.lambda_handler'
      MemorySize: 256
      Role: !GetAtt 'LambdaIamRole.Arn'
      Runtime: python3.12
      Timeout: 300
      ReservedConcurrentExecutions: 2
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              print(event)

  LambdaIamRole:
    Type: AWS::IAM::Role
    # checkov:skip=CKV_AWS_111:CloudWatch Logs doesn't support condition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Policy has conditions when it is allowed"
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Add Policies to EC2 instance Lambda
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/job-function/ViewOnlyAccess'
      Policies:
        - PolicyName: 'CloudWatchLogs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'

              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*LambdaFunction*:*'

        - PolicyName: 'CloudWatchMetrics'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'ResourceCounter'

        - PolicyName: 'EC2'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:Describe*'
                Resource: '*'
                Condition:
                  StringEquals:
                    'ec2:Region': !Ref 'AWS::Region'

        - PolicyName: 'ServicesWithoutCondition'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'kms:List*'
                  - 'cloudtrail:List*'
                  - 'cloudwatch:Describe*'
                Resource: '*'

  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties: 
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt "ScheduledRule.Arn"

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Run Lambda to add policies to EC2 instance"
      ScheduleExpression: !Ref ScheduleExpression
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt "LambdaFunction.Arn"
          Id: "TargetFunctionV1"

